from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.models import User
from quiz.models import Order, Token, Respond, Image, Staff, ReferenceImage, Review

from django.template import RequestContext
from django.contrib.auth import login, authenticate
from quiz.forms import RegisterForm, LoginForm
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse, Http404
from random import randint
from django.db.models import Q
from django.templatetags.static import static

import json

import requests

from quiz.handlers import handler, send_message
from quiz.utilities import unique_view_of_order, to_hash, from_hash, mean_rating, format_date

from service.settings import admin_id, hashid_salt, alphabet, APIKEY

from hashids import Hashids

from django.contrib.auth.decorators import login_required
from django.contrib.admin.views.decorators import staff_member_required


budget = {
    '30': '–¥–æ 1500 —Ä—É–±',
    '50': '–¥–æ 2500 —Ä—É–±',
    '75': '–¥–æ 3500 —Ä—É–±',
    '100': '–¥–æ 5000 —Ä—É–±',
    '150': '–æ—Ç 5000 —Ä—É–±'
}


def handler404(request, exception):
    return render(request, 'quiz/404.html', status=404)


def handler500(request):
    return render(request, 'quiz/500.html', status=500)


def login_view(request):
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            cd = form.cleaned_data
            user = authenticate(username=cd['username'], password=cd['password'])
            if user is not None:
                if user.is_active:
                    login(request, user)
                    return redirect('staff_orders')
                else:
                    return render(request, 'quiz/login.html', {'form': form, 'not_exist': True})
            else:
                return render(request, 'quiz/login.html', {'form': form, 'not_correct': True})
    else:
        form = LoginForm()
    return render(request, 'quiz/login.html', {'form': form})


# –ï—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
def login_view_redirect(request):
    nxt = request.GET.get("next", None)
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            cd = form.cleaned_data
            user = authenticate(username=cd['username'], password=cd['password'])
            if user is not None:
                if user.is_active:
                    login(request, user)
                    return redirect(nxt)
                else:
                    return render(request, 'quiz/login.html', {'form': form, 'not_exist': True})
            else:
                return render(request, 'quiz/login.html', {'form': form, 'not_correct': True})
    else:
        form = LoginForm()
    return render(request, 'quiz/login.html', {'form': form})


def landing(request):
    return render(request, 'quiz/landing.html')


def quiz(request):
    if request.method == 'POST':
        name = request.POST.get('name').capitalize()
        phone = request.POST.get('phone').replace('(', '').replace(')', '').replace('-', '')
        title = request.POST.get('title').capitalize()
        respond_price = request.POST.get('respond_price')
        message = request.POST.get('message')
        city = request.POST.get('city')[2:]
        address = request.POST.get('address')
        delivery = request.POST.get('delivery')
        d = request.POST.get('date')
        date = format_date(d)
        images = request.FILES.getlist('reference_images')
        if delivery == "need":
            delivery_info = "–¢—Ä–µ–±—É–µ—Ç—Å—è"
        else:
            delivery_info = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        note = f'''–ò–º—è: {name};\n–ó–∞–¥–∞–Ω–∏–µ: {title};\n–ê–¥—Ä–µ—Å: {address};\n–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_info};\n–ö –¥–∞—Ç–µ: {date};\n–ë—é–¥–∂–µ—Ç: {budget.get(str(respond_price))};\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {message};'''
        # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—Å—ã–ª–∫–∏
        hashids = Hashids(salt=hashid_salt, alphabet=alphabet, min_length=5)
        order = Order(name=name, phone=phone, status="NEW", note=note, respond_price=int(respond_price), city=city)
        order.save()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤
        if images:
            for image in images:
                ReferenceImage.objects.create(image=image, order=order)
        order_url = hashids.encode(order.id)
        order.order_url = order_url
        order.save()
        order_text = f'''üî¥–ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ïüî¥\n{order.note}'''
        keyboard = json.dumps({"inline_keyboard": [[{"text": "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", 'url': f'https://caketeam.store/orders/{order.id}'}]]})
        admin_staff_list = Staff.objects.filter(admin=True)
        for admin_staff in admin_staff_list:
            send_message(chat_id=int(admin_staff.telegram_id), text=order_text, reply_markup=keyboard)
        return redirect('order_for_client', order_url=order.order_url)
    else:
        title = request.GET.get('title')
        if title:
            return render(request, 'quiz/quiz.html', {'title': title})
        else:
            return render(request, 'quiz/quiz.html', {'title': ''})


def order_for_client(request, order_url):
    # –ù–∞—Ö–æ–¥–∏–º id —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏–¥–µ—Ç –ø–æ—Å–ª–µ "-"
    order = get_object_or_404(Order, order_url=order_url)
    responds = Respond.objects.filter(order=order)
    context = {'order': order, 'responds': responds}
    if request.method == "GET":
        return render(request, 'quiz/order_for_client.html', context)
    else:
        respond_id = request.POST.get("respond_id")
        first = request.POST.get("first")
        second = request.POST.get("second")
        third = request.POST.get("third")
        fourth = request.POST.get("fourth")
        if first != '' and second != '' and third != '' and fourth != '':
            confirm_code = int(first + second + third + fourth)
            respond = get_object_or_404(Respond, id=int(respond_id))
        else:
            return render(request, 'quiz/order_for_client.html',
                          {'order': order, 'responds': responds, 'mistake': True})
        if confirm_code == respond.code:
            order.staff = respond.staff
            order.status = "WORK"
            order.save()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ—Ç–∑—ã–≤—ã
            respond.code = randint(1000, 9999)
            respond.save()
            return redirect('order_for_client', order.order_url)
        else:
            return render(request, 'quiz/order_for_client.html', {'order': order, 'responds': responds, 'mistake': True})


# –î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ AJAX –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
def confirm(request):
    if request.method == "POST":
        respond_id = request.POST.get("id")
        respond = get_object_or_404(Respond, id=int(respond_id))
        code = respond.code
        order = respond.order
        phone = order.phone
        url = 'https://vp.voicepassword.ru/api/voice-password/send/'
        apikey = APIKEY
        data = {"security": {"apiKey": f"{apikey}"}, "number": f"{phone}", "flashcall": {"code": f"{code}"}}
        requests.post(url, data=json.dumps(data))
        return HttpResponse('ok', content_type='text/plain', status=200)


# –û—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
def review_done(request, order_url):
    order = Order.objects.filter(order_url=order_url)[0]
    if order.status == "WORK":
        staff = order.staff
        respond = Respond.objects.filter(order=order, staff=staff)[0]
        if request.method == "GET":
            context = {'order': order, 'staff': staff, 'respond': respond}
            return render(request, 'quiz/review_done.html', context=context)
        if request.method == "POST":
            first = request.POST.get("first")
            second = request.POST.get("second")
            third = request.POST.get("third")
            fourth = request.POST.get("fourth")
            if first != '' and second != '' and third != '' and fourth != '':
                confirm_code = int(first + second + third + fourth)
            if respond.code == confirm_code:
                text = request.POST.get("text")
                rating = int(request.POST.get("rating"))
                review = Review(text=text, rating=rating, order=order, staff=staff)
                review.save()
                order.status = "DONE"
                order.save()
                return redirect('order_for_client', order.order_url)
            else:
                return render(request, 'quiz/review_done.html', context={'order': order, 'staff': staff, 'respond': respond, 'mistake': True})
    else:
        raise Http404()


# –û—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
def review_undone(request, order_url):
    order = Order.objects.filter(order_url=order_url)[0]
    if order.status == "WORK":
        staff = order.staff
        respond = Respond.objects.filter(order=order, staff=staff)[0]
        if request.method == "GET":
            context = {'order': order, 'staff': staff, 'respond': respond}
            return render(request, 'quiz/review_done.html', context=context)
        if request.method == "POST":
            first = request.POST.get("first")
            second = request.POST.get("second")
            third = request.POST.get("third")
            fourth = request.POST.get("fourth")
            confirm_code = int(first + second + third + fourth)
            if respond.code == confirm_code:
                text = request.POST.get("text")
                rating = int(request.POST.get("rating"))
                review = Review(text=text, rating=rating, order=order, staff=staff)
                review.save()
                order.status = "UNDONE"
                order.save()
                return redirect('order_for_client', order.order_url)
            else:
                return render(request, 'quiz/review_done.html', context={'order': order, 'staff': staff, 'respond': respond, 'mistake': True})
    else:
        raise Http404()


def registration(request, chat_id, username):
    if request.method == 'POST':
        username = username.lower()
        name = request.POST.get('name').capitalize()
        surname = request.POST.get('surname').capitalize()
        phone = request.POST.get('phone')
        instagram = request.POST.get('instagram').lower()
        pin = chat_id[-4:]
        form = RegisterForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data['email']
            password = form.cleaned_data['password']
            user = User.objects.create_user(username=username, email=email, password=password)
            staff = Staff(username=username, telegram_id=chat_id, cities="", name=name, surname=surname, pin=pin, phone=phone, instagram=instagram, user=user)
            staff.save()
            login(request, user)
        # –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        send_message(chat_id=admin_id, text=f'''–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è @{username.lower()}''')
        text = '''üôå –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ!\n\n–ù–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É:\n\nüîä –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ - —Å–æ–æ–±—â–∞—Ç—å –í–∞–º –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö, –ø–æ—ç—Ç–æ–º—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n–ú–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ—Å—Ç–æ–π:\n\nüç∞ –ö–ª–∏–µ–Ω—Ç—ã, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ –¥–µ—Å–µ—Ä—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑—ã –¥–µ—Å–µ—Ä—Ç–æ–≤ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, —ç—Ç–∏ –∑–∞—è–≤–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç –∫ –≤–∞–º. –ò –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–∫–ª–∏–∫, –ø—Ä–æ—è–≤–∏–≤ –∂–µ–ª–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑. –ù–∞ –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –¥–æ 5 –∫–æ–Ω–¥–∏—Ç–µ—Ä–æ–≤. –ó–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, —Ç–∞–∫ –∫–∞–∫ –≤ –æ—Ç–∫–ª–∏–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (WA –∏ Instagram).\n\nüë©‚Äçüç≥ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–º–æ–∂–µ—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞—á–∏–∫–æ–≤, —Ç–∞–º –∂–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑—ã –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º.\n\n‚≠ê –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –∫–æ–Ω–¥–∏—Ç–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∏ –æ—Ç–∑—ã–≤ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞, –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ —Å—Ç—Ä–æ–∏—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞.\n\n–ñ–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–∫–∞–∑–æ–≤!'''
        keyboard = json.dumps({'keyboard': [["–ó–∞–∫–∞–∑—ã"], ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], ["–ú–æ–π pin-–∫–æ–¥"], ["–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞"]],
                               'one_time_keyboard': True, 'resize_keyboard': True})
        send_message(chat_id=chat_id, text=text, reply_markup=keyboard)
        return redirect('profile_edit', telegram_id=chat_id)
    if request.method == 'GET':
        if len(Staff.objects.filter(username=username)) == 0 and len(Staff.objects.filter(telegram_id=chat_id)) == 0:
            user_form = RegisterForm()
            pin = chat_id[-4:]
            return render(request, 'quiz/registration.html', {'pin': pin, 'username': username.lower(), 'form': user_form})
        else:
            send_message(chat_id=chat_id, text=f'''–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ: \n/start''')
            raise Http404()


@staff_member_required
def staff_list(request):
    if request.GET.get("search") != None:
        search = request.GET.get("search")
        active = Staff.objects.filter(Q(active=True) & (Q(instagram__icontains=search) | Q(username__icontains=search) | Q(name__icontains=search) | Q(surname__icontains=search) | Q(phone__icontains=search))).order_by('-date')
        inactive = Staff.objects.filter(Q(active=False) & (Q(instagram__icontains=search) | Q(username__icontains=search) | Q(name__icontains=search) | Q(surname__icontains=search) | Q(phone__icontains=search))).order_by('-date')
    else:
        active = Staff.objects.filter(active=True).order_by('-date')
        inactive = Staff.objects.filter(active=False).order_by('-date')
    return render(request, 'quiz/staff_list.html', {'active': active, 'inactive': inactive})


@staff_member_required
def staff_activate(request, chat_id):
    staff = Staff.objects.filter(telegram_id=chat_id)[0]
    staff.active = True
    staff.save()
    return redirect('staff_list')


@staff_member_required
def staff_deactivate(request, chat_id):
    staff = Staff.objects.filter(telegram_id=chat_id)[0]
    staff.active = False
    staff.save()
    return redirect('staff_list')


@staff_member_required
def staff_delete(request, chat_id):
    staff = Staff.objects.filter(telegram_id=chat_id)[0]
    user = staff.user
    staff.delete()
    user.delete()
    return redirect('staff_list')


@staff_member_required
def orders(request):
    if request.GET.get("status") == "ALL":
        orders = Order.objects.all().order_by('-date')
    elif request.GET.get("status") == "NEW":
        orders = Order.objects.filter(status="NEW").order_by('-date')
    elif request.GET.get("status") == "FIND":
        orders = Order.objects.filter(status="FIND").order_by('-date')
    elif request.GET.get("status") == "WORK":
        orders = Order.objects.filter(status="WORK").order_by('-date')
    elif request.GET.get("status") == "DONE":
        orders = Order.objects.filter(status="DONE").order_by('-date')
    elif request.GET.get("status") == "UNDONE":
        orders = Order.objects.filter(status="UNDONE").order_by('-date')
    else:
        orders = Order.objects.all().order_by('-date')
    return render(request, 'quiz/orders.html', {'orders': orders})


@staff_member_required
def delete_order(request, order_id):
    order = Order.objects.filter(id=order_id)[0]
    order.delete()
    return redirect('orders')


@staff_member_required
def order_detail(request, order_id):
    order = get_object_or_404(Order, id=order_id)
    if request.method == 'POST':
        note = request.POST.get('note')
        max_responds = request.POST.get('max_responds')
        respond_price = request.POST.get('respond_price')
        phone = request.POST.get('phone')
        city = request.POST.get('city')
        send_all = request.POST.get('send_all')
        order.max_responds = max_responds
        order.respond_price = int(respond_price)
        order.status = "FIND"
        order.note = note
        order.phone = phone
        order.city = city
        order.save()
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ –∑–∞—è–≤–∫–∏ –≤ –≤–∏–¥–µ —Ö—ç—à—Ç–µ–≥–∞
        numb_of_order = order.set_numb_of_order()
        staff_list = Staff.objects.filter(active=True)
        for staff in staff_list:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º, –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ—Ç —Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º
            if order.city in staff.cities or staff.cities == '' or send_all is '1':
                hash_order_id = to_hash(order.id)
                hash_telegram_id = to_hash(int(staff.telegram_id))
                order_text = f'''‚ö†Ô∏è –ó–∞–∫–∞–∑ {numb_of_order}\n{order.note.replace(";", "")}'''
                keyboard = json.dumps({"inline_keyboard": [[{"text": "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", 'url': f'https://caketeam.store/n/{hash_telegram_id}/{hash_order_id}'}]]})
                send_message(chat_id=int(staff.telegram_id), text=order_text, reply_markup=keyboard)
        return redirect('order_detail', order_id=order_id)
    else:
        notes = order.note
        responds = Respond.objects.filter(order=order)
        respond_price = order.respond_price

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∏
        if responds is not None:
            # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            if order.staff is not None:
                staff = order.staff
                respond = Respond.objects.filter(order=order, staff=staff)[0]
                return render(request, 'quiz/order_detail.html',
                              {'order': order, 'notes': notes, 'respond_price': respond_price, 'respond': respond})
            return render(request, 'quiz/order_detail.html', {'order': order, 'notes': notes, 'respond_price': respond_price, 'responds': responds})

        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤
        return render(request, 'quiz/order_detail.html', {'order': order, 'respond_price': respond_price, 'notes': notes})


# –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –±–µ–∑ –ª–æ–≥–∏–Ω–∞
def order_respond(request, hash_order_id, hash_telegram_id):
    order_id = int(from_hash(hash_order_id))
    telegram_id = str(from_hash(hash_telegram_id))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –¥–∞ —Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ view –ø–æ–Ω—è—Ç–Ω—ã–º –∞–¥–æ—Ä–µ—Å–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if request.user.is_authenticated:
        return redirect('order_respond_login', order_id=order_id, telegram_id=telegram_id)
    order = get_object_or_404(Order, id=order_id)
    staff = Staff.objects.filter(telegram_id=telegram_id)[0]
    if request.method == 'POST':
        text = request.POST.get('message')
        price = request.POST.get('price')
        pin = request.POST.get('pin')
        # –¢–∞–∫ –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = request.FILES.getlist('images')
        if str(staff.pin) == str(pin):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏ –¥–µ–Ω—å–≥–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è, –∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            if len(Respond.objects.filter(order=order, staff=staff)) == 0:
                # –ù—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —é–∑–µ—Ä—É
                code = randint(1000, 9999)
                respond = Respond.objects.create(text=text, order=order, staff=staff, price=price, code=code)
                if images:
                    for image in images:
                        img = Image(image=image, respond=respond)
                        img.save()
                if staff.unlimited is False:
                    staff.balance = staff.balance - order.respond_price
                    staff.save()
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
            else:
                respond = Respond.objects.filter(order=order, staff=staff)[0]
                respond.text = text
                respond.price = price
                respond.save()
                if images:
                    for image in images:
                        Image.objects.create(image=image, respond=respond)
            return redirect('order_respond', hash_order_id=hash_order_id, hash_telegram_id=hash_telegram_id)
        else:
            # –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∏–Ω –∫–æ–¥
            keyboard = json.dumps({'keyboard': [["–ó–∞–∫–∞–∑—ã"], ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], ["–ú–æ–π pin-–∫–æ–¥"], ["–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞"]],
                                   'one_time_keyboard': True, 'resize_keyboard': True})
            send_message(chat_id=int(staff.telegram_id), text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π pin-–∫–æ–¥", reply_markup=keyboard)
            return redirect('order_respond', hash_order_id=hash_order_id, hash_telegram_id=hash_telegram_id)
    elif request.method == 'GET':
        if order.status == "FIND" or order.status == "WORK" or order.status == "DONE":
            notes = order.note.replace('-', '<br>')
            # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if unique_view_of_order(order=order, staff=staff):
                order.views = order.views + 1
                order.save()
            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö
            amount_responds = len(Respond.objects.filter(order=order))
            # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–∏–∫–∞ –ø–æ –ø–∏–Ω—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ id —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∏–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –∫–æ–¥–µ
            num = staff.id

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ –¥–∞–Ω–Ω—ã–º —é–∑–µ—Ä–æ–º
            if len(Respond.objects.filter(order=order, staff=staff)) > 0:
                respond = Respond.objects.filter(order=order, staff=staff)[0]
            else:
                respond = None
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
            has_balance = staff.balance - order.respond_price >= 0
            context = {'order': order, 'staff': staff, 'notes': notes, 'num': num, 'amount_responds': amount_responds, 'respond': respond, 'has_balance': has_balance}
            return render(request, 'quiz/order_respond.html', context)
        else:
            raise Http404()


# –ï—Å–ª–∏ —é–∑–µ—Ä –∑–∞–ª–æ–≥–∏–Ω–µ–Ω !! –î–û–ë–ê–í–ò–¢–¨ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
@login_required
def order_respond_login(request, order_id, telegram_id):
    order = get_object_or_404(Order, id=order_id)
    staff = Staff.objects.filter(telegram_id=telegram_id)[0]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ –±—ã—Ç—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã–º –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if request.user.staff.telegram_id == str(telegram_id):
        if request.method == 'POST':
            text = request.POST.get('message')
            price = request.POST.get('price')
            pin = request.POST.get('pin')
            # –¢–∞–∫ –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            images = request.FILES.getlist('images')
            if str(staff.pin) == str(pin):
                code = randint(1000, 9999)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏ –¥–µ–Ω—å–≥–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è, –∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                if len(Respond.objects.filter(order=order, staff=staff)) == 0:
                    # –ù—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —é–∑–µ—Ä—É
                    respond = Respond.objects.create(text=text, order=order, staff=staff, price=price, code=code)
                    if images:
                        for image in images:
                            img = Image(image=image, respond=respond)
                            img.save()
                    staff.balance = staff.balance - order.respond_price
                    staff.save()
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
                else:
                    respond = Respond.objects.filter(order=order, staff=staff)[0]
                    respond.text = text
                    respond.price = price
                    respond.save()
                    if images:
                        for image in images:
                            Image.objects.create(image=image, respond=respond)
                return redirect('order_respond_login', order_id=order.id, telegram_id=staff.telegram_id)
            else:
                # –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∏–Ω –∫–æ–¥
                keyboard = json.dumps({'keyboard': [["–ó–∞–∫–∞–∑—ã"], ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], ["–ú–æ–π pin-–∫–æ–¥"], ["–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞"]],
                                       'one_time_keyboard': True, 'resize_keyboard': True})
                send_message(chat_id=int(staff.telegram_id), text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π pin-–∫–æ–¥", reply_markup=keyboard)
                return redirect('order_respond_login', order_id=order_id, telegram_id=telegram_id)
        elif request.method == 'GET':
            if order.status == "FIND" or order.status == "WORK" or order.status == "DONE":
                notes = order.note.replace('-', '<br>')
                # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if unique_view_of_order(order=order, staff=staff):
                    order.views = order.views + 1
                    order.save()
                # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö
                amount_responds = len(Respond.objects.filter(order=order))
                # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–∏–∫–∞ –ø–æ –ø–∏–Ω—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ id —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∏–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –∫–æ–¥–µ
                num = staff.id

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ –¥–∞–Ω–Ω—ã–º —é–∑–µ—Ä–æ–º
                if len(Respond.objects.filter(order=order, staff=staff)) > 0:
                    respond = Respond.objects.filter(order=order, staff=staff)[0]
                else:
                    respond = None
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
                has_balance = staff.balance - order.respond_price >= 0
                context = {'order': order, 'staff': staff, 'notes': notes, 'num': num, 'amount_responds': amount_responds, 'respond': respond, 'has_balance': has_balance}
                return render(request, 'quiz/order_respond.html', context)
            else:
                raise Http404("–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        raise Http404("–°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç")


@login_required
def profile_edit(request, telegram_id):
    staff = get_object_or_404(Staff, telegram_id=telegram_id)
    rating = mean_rating(staff=staff)
    if request.user.staff == staff or request.user.is_superuser:
        if request.method == "GET":
            # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –ë–î –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–π —Å–ø–∏—Å–∫–æ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –≤ –≤–∏–¥–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
            cities = staff.cities[:-1].split(";")
            context = {'staff': staff, 'cities': cities, 'rating': rating}
            return render(request, 'quiz/profile_edit.html', context=context)
        elif request.method == "POST":
            avatar = request.FILES.get('avatar')
            if avatar:
                staff.avatar = avatar
                staff.save()
            return redirect('profile_edit', telegram_id=telegram_id)
    else:
        raise Http404("–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç")


def profile(request, telegram_id):
    staff = get_object_or_404(Staff, telegram_id=telegram_id)
    rating = mean_rating(staff=staff)
    cities = staff.cities[:-1].split(";")
    context = {'staff': staff, 'cities': cities, 'rating': rating}
    return render(request, 'quiz/profile.html', context=context)


@login_required
def profile_edit_info(request, telegram_id):
    staff = get_object_or_404(Staff, telegram_id=telegram_id)
    if request.user.staff == staff:
        info = request.POST.get('info')
        staff.info = info
        staff.save()
        return redirect('profile_edit', telegram_id=telegram_id)
    else:
        raise Http404("–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç")


@login_required
def profile_edit_contacts(request, telegram_id):
    staff = get_object_or_404(Staff, telegram_id=telegram_id)
    if request.user.staff == staff:
        phone = request.POST.get('phone')
        instagram = request.POST.get('instagram')
        staff.phone = phone
        staff.instagram = instagram
        staff.save()
        return redirect('profile_edit', telegram_id=telegram_id)
    else:
        raise Http404("–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç")


@staff_member_required
def respond_choice(request, respond_id):
    respond = get_object_or_404(Respond, id=respond_id)
    staff = respond.staff
    order = respond.order
    order.staff = staff
    order.status = "WORK"
    order.save()
    return redirect('order_detail', order.id)


@staff_member_required
def respond_cancel(request, respond_id):
    respond = get_object_or_404(Respond, id=respond_id)
    order = respond.order
    order.staff = None
    order.status = "FIND"
    order.save()
    return redirect('order_detail', order.id)


@staff_member_required
def respond_delete(request, respond_id):
    respond = get_object_or_404(Respond, id=respond_id)
    order = respond.order
    respond.delete()
    return redirect('order_detail', order.id)


def order_done(request, order_id):
    order = get_object_or_404(Order, id=order_id)
    order.status = "DONE"
    order.save()
    return redirect('order_detail', order.id)


# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞
@login_required
def staff_orders(request):
    orders = Order.objects.exclude(status="NEW").order_by('-date')
    staff = request.user.staff
    filter_orders = []
    active = False
    if request.GET.get('f') == 'city':
        active = True
        for order in orders:
            if order.city in staff.cities:
                filter_orders.append(order)
    else:
        filter_orders = orders
    context = {'orders': filter_orders, 'staff': staff, 'active': active}
    return render(request, 'quiz/staff_orders.html', context)


@csrf_exempt
def bot(request):
    if request.method == "POST":
        data = json.loads(request.body)
        print(data)
        if "message" in data:
            chat_id = data["message"]["chat"]["id"]
            if "text" not in data["message"]:
                text = '''–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'''
                send_message(chat_id=chat_id, text=text)
            else:
                text = data["message"]["text"]

            if 'username' in data["message"]["chat"]:
                username = data["message"]["chat"]["username"]
                handler(chat_id=chat_id, text=text, username=username)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                text = '''–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –í–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è". \n\n‚öô –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–∑–º." –≤ –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –º–µ–Ω—é –¥–æ–±–∞–≤—å—Ç–µ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! \n\n‚ùó –ü–æ–∫–∞ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è! –û–Ω–æ —Å–ª—É–∂–∏—Ç –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. \n\nüëá –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ò–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∂–º–∏—Ç–µ: \n/start'''
                send_message(chat_id=chat_id, text=text)
    return HttpResponse('ok', content_type='text/plain', status=200)


# —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤
def delete_foto(request):
    if request.method == "POST":
        # —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–∫–æ–º
        image_ids = request.POST.getlist('ids[]')
        for image_id in image_ids:
            image = Image.objects.get(id=image_id)
            image.delete()
        return HttpResponse('ok', content_type='text/plain', status=200)

@staff_member_required
def setwebhook(request):
    if request.method == "POST":
        token = request.POST.get('token')
        link = request.POST.get('link')
        token_exist = Token.objects.filter(id=1)
        if token_exist:
            new_token = token_exist[0]
            new_token.token = token
            new_token.save()
        else:
            new_token = Token(id=1, token=token)
            new_token.save()
        requests.get(f'https://api.telegram.org/bot{token}/setWebhook?url=https://{link}/bot')
        return redirect('setwebhook')
    else:
        url = request.build_absolute_uri().split('/')[2]
        return render(request, 'quiz/setwebhook.html', {'url': url})


@staff_member_required()
def deletewebhook(request):
    if request.method == "POST":
        token = request.POST.get('token')
        requests.get(f'https://api.telegram.org/bot{token}/deleteWebhook')
        return redirect('deletewebhook')
    else:
        token = Token.objects.filter(id=1)
        return render(request, 'quiz/deletewebhook.html', {'token': token})


# –°—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–∞ WA –∏ Instagram
def hint(request):
    if request.method == "POST":
        to = request.POST.get("to")
        respond_id = request.POST.get("id")
        if to == "wa":
            respond = Respond.objects.filter(id=respond_id)[0]
            respond.wa_hint = respond.wa_hint + 1
            respond.save()
        elif to == "insta":
            respond = Respond.objects.filter(id=respond_id)[0]
            respond.insta_hint = respond.insta_hint + 1
            respond.save()
        return HttpResponse('ok', content_type='text/plain', status=200)


def calc(request):
    if request.method == "POST":
        price = request.POST.get('price')
        print(price)
        return redirect('calc')
    else:
        return render(request, 'quiz/calc.html')


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞
def edit_city(request):
    if request.method == "POST":
        telegram_id = request.POST.get("telegram_id")
        action = request.POST.get("action")
        city = request.POST.get("city")
        staff = Staff.objects.filter(telegram_id=telegram_id)[0]
        if action == "add":
            staff.cities = staff.cities + (city + ";")
            staff.save()
        elif action == "delete":
            staff.cities = staff.cities.replace(f'{city};', '')
            staff.save()
        return HttpResponse('ok', content_type='text/plain', status=200)
